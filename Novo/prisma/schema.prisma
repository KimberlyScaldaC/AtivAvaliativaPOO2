// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//-------------------------------------------------------------

// AQUI VAI FICAR A PARTE DO BANCO DE DADOS

model Aluno {
  idAluno   String @id @default(uuid())

  matricula Int    @unique
  email     String @unique
  nome      String

  // Ligaçao com a classe Avaliacao com uma relação -> muitos-para-muitos
  avaliacoes AlunoOnAvaliacao[]

  // Ligaçao com a classe Grupo para o lider com uma relação -> um para um
  grupo Grupo? @relation("Lideranca")

  // Ligaçao com a classe Grupo para os componentes com uma relação -> um-para-muitos
  grupoAlunos Grupo @relation("Composicao", fields: [grupoId], references: [idGrupo])
  grupoId String

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model AlunoOnAvaliacao {
  aluno Aluno @relation(fields: [alunoId], references: [idAluno])
  alunoId String
  avaliacao Avaliacao @relation(fields: [avaliacaoId], references: [idAvaliacao])
  avaliacaoId String

  @@id([alunoId, avaliacaoId])

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Professor {
  idProfessor String @id @default(uuid())

  matricula   Int    @unique
  email       String @unique
  nome        String

  // Ligaçao com a classe Professor com uma relação -> muitos-para-muitos
  avaliacoes ProfessorOnAvaliacao[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model ProfessorOnAvaliacao {
  professor Professor @relation(fields: [professorId], references: [idProfessor])
  professorId String
  avaliacao Avaliacao @relation(fields: [avaliacaoId], references: [idAvaliacao])
  avaliacaoId String

  @@id([professorId, avaliacaoId])

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Avaliacao {
  idAvaliacao   String @id @default(uuid())

  // Ligaçao com a classe Aluno com uma relação -> muitos-para-muitos
  alunos AlunoOnAvaliacao[]
  notaAluno     Int
  // Ligaçao com a classe Professor com uma relação -> muitos-para-muitos
  professores ProfessorOnAvaliacao[]
  notaProfessor Int

  // Ligaçao com a classe Estande com uma relação -> muitos-para-muitos
  estande AvaliacaoOnEstande[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model AvaliacaoOnEstande {
  avaliacao Avaliacao @relation(fields: [avaliacaoId], references: [idAvaliacao])
  avaliacaoId String
  estande Estande @relation(fields: [estandeId], references: [idEstande])
  estandeId String

  @@id([avaliacaoId, estandeId])

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Grupo {
  idGrupo  String @id @default(uuid())

  nomeGrupo String
  matricula Int

  // Ligaçao com a classe Aluno com uma relação -> um para um
  lider Aluno @relation("Lideranca", fields: [liderId], references: [idAluno])
  liderId String @unique 

  // Ligaçao com a classe Aluno Para os instegrantes do grupo com uma relação -> um-para-muitos
  alunos Aluno[] @relation("Composicao")

  // Ligaçao com a classe Estande com uma relacao -> um-para-muitos
  estande Estande @relation(fields: [estandeId], references: [idEstande])
  estandeId String

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}


model Estande {
  idEstande            String @id @default(uuid())

  numeroEstande        Int
  dataApresentacao     DateTime
  horaApresentacao     DateTime
  notaGrupoProfessores Float
  notaGrupoAlunos      Float
  
  // Ligaçao com a classe Grupo com uma relacao -> um-para-muitos
  grupo Grupo[]
  
  // Ligaçao com a classe Avaliacao com uma relação -> muitos-para-muitos
  avaliacoes  AvaliacaoOnEstande[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

//-------------------------------------------------------------

// model Aluno {
//   idAluno   String @id @default(uuid())

//   matricula Int    @unique
//   email     String @unique
//   nome      String

//   // Ligaçao com a classe Avaliacao com uma relação -> muitos-para-muitos
//   avaliacoes AlunoOnAvaliacao[]

//   // Ligaçao com a classe Grupo para o lider
//   grupo Grupo? @relation("Lideranca")

//   // Ligaçao com a classe Grupo para o lider
//   grupoAlunos Grupo @relation("Composicao", fields: [grupoId], references: [idGrupo])
//   grupoId String

//   created_at DateTime @default(now())
//   updated_at DateTime @default(now())
// }

// model Grupo {
//   idGrupo  String @id @default(uuid())

//   nomeGrupo String
//   matricula Int

//   // Ligaçao com a classe Aluno com uma relação -> um-para-muitos
//   lider Aluno @relation("Lideranca", fields: [liderId], references: [idAluno])
//   liderId String @unique 

//   // Ligaçao com a classe Aluno Para os instegrantes do grupo
//   alunos Aluno[] @relation("Composicao")

//   //  post
//   // Ligaçao com a classe Estande Para os integrantes do grupo com uma relacao -> um-para-muitos
//   estande Estande @relation("estande",fields: [estandeId], references: [idEstande])
//   estandeId String

//   // Ligaçao com a classe Estande Para o lider do grupo com uma relacao -> um-para-um
//   liderEstande Estande?

//   created_at DateTime @default(now())
//   updated_at DateTime @default(now())
// }


// model Estande {
//   idEstande            String @id @default(uuid())

//   numeroEstande        Int
//   dataApresentacao     DateTime
//   horaApresentacao     DateTime
//   notaGrupoProfessores Float
//   notaGrupoAlunos      Float
  
//   integrantes Grupo[]         @relation("estande")
//   lider       Grupo           @relation( fields: [liderId], references: [idGrupo])
//   liderId              String @unique
  
//   // Ligaçao com a classe Avaliacao com uma relação -> muitos-para-muitos
//   avaliacoes  AvaliacaoOnEstande[]

//   created_at DateTime @default(now())
//   updated_at DateTime @default(now())
// }


//-------------------------------------------------------------

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User    @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

//----------------------------------------------------- SITES -->

// https://github.com/prisma/prisma/discussions/13341
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations

//-------------------------------------------------------------
