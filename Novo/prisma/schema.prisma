// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//-------------------------------------------------------------

// AQUI VAI FICAR A PARTE DO BANCO DE DADOS

model Aluno {
  idAluno   String @id @default(uuid())
  matricula Int    @unique
  email     String @unique
  nome      String
}

model AlunoAvaliacao {
  idAlunoAvaliacao String @id @default(uuid())
  //avaliacao1 Avaliacao   @relation(fields: [avaliacaoAluno], references: [idAvaliacao], name: "avaliacao1")
  avaliacaoAluno   Int
  //avaliacao2 Avaliacao   @relation(fields: [matriculaAluno], references: [idAvaliacao], name: "avaliacao2")
  matriculaAluno   Int
  
}

model Professor {
  idProfessor String @id @default(uuid())
  matricula   Int    @unique
  email       String @unique
  nome        String
  avaliacoes ProfessorAvaliacao[]
}

model ProfessorAvaliacao {
  professor Professor @relation(fields: [professorId], references: [idProfessor])
  professorId String
  avaliacao Avaliacao @relation(fields: [avaliacaoId], references: [idAvaliacao])
  avaliacaoId String

  @@id([professorId, avaliacaoId])
}

model Avaliacao {
  idAvaliacao String @id @default(uuid())
  idEstande   String
  nota        Int
  professores ProfessorAvaliacao[]
}

model AvaliacaoParaEstande {
  idAvaliacaoParaEstande String @id @default(uuid())

}

model Estande {
  idEstande            String @id @default(uuid())
  integrantes          Int  //FAZER UMA LIGACAO NA CLASSE ALUNO PARA PEGA SUA MATRICULA
  matriculaLider       Int    @unique
  numeroEstande        Int
  nomeGrupo            String
  dataApresentacao     DateTime
  horaApresentacao     DateTime
  notaGrupoProfessores Float
  notaGrupoAlunos      Float
}


//-------------------------------------------------------------

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}

//----------------------------------------------------- SITES -->

// https://github.com/prisma/prisma/discussions/13341
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations

//-------------------------------------------------------------

// model Professor {
//   idProfessor String @id @default(uuid())
//   matricula   Int    @unique
//   email       String @unique
//   nome        String
  
// }

// model ProfessorAvaliacao {
//   idProfessorAvaliacao String @id @default(uuid())
//   avaliacao1 Avaliacao        @relation(fields: [avaliacaoProfessor], references: [idAvaliacao], name: "avaliacao1")
//   avaliacaoProfessor   String
//   avaliacao2 Avaliacao        @relation(fields: [matriculaProfessor], references: [idAvaliacao], name: "avaliacao2")
//   matriculaProfessor   Int
// }

// model Avaliacao {
//   idAvaliacao String @id @default(uuid())
//   idEstande   String
//   //avaliacaoAlunos      AlunoAvaliacao[]     @relation("avaliacao1")
//   //matriculaAlunos      AlunoAvaliacao[]     @relation("avaliacao2")
//   //AvaliacaoParaEstande AvaliacaoParaEstande @relation(fields: [avaliacaoProfessores], references: [idAvaliacaoParaEstande], name: "AvaliacaoParaEstande")
//   // avaliacaoProfessores ProfessorAvaliacao[] @relation("avaliacao1")
//   // matriculaProfessores ProfessorAvaliacao[] @relation("avaliacao2")
  
// }
